//
// Generated file, do not edit! Created by nedtool 6.0 from ib_dtm/ApplicationLayerTestMessage.msg.
//

#ifndef __IB_DTM_APPLICATIONLAYERTESTMESSAGE_M_H
#define __IB_DTM_APPLICATIONLAYERTESTMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef IB_DTM_API
#  if defined(IB_DTM_EXPORT)
#    define IB_DTM_API  OPP_DLLEXPORT
#  elif defined(IB_DTM_IMPORT)
#    define IB_DTM_API  OPP_DLLIMPORT
#  else
#    define IB_DTM_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace ib_dtm {

/**
 * Class generated from <tt>ib_dtm/ApplicationLayerTestMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet ApplicationLayerTestMessage extends BaseFrame1609_4
 * {
 *     //    string demoData;
 *     //    veins::LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 *     int sender = 0;
 *     bool isMalicious = false;
 * }
 * </pre>
 */
class IB_DTM_API ApplicationLayerTestMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int serial;
    int sender;
    bool isMalicious;

  private:
    void copy(const ApplicationLayerTestMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ApplicationLayerTestMessage&);

  public:
    ApplicationLayerTestMessage(const char *name=nullptr, short kind=0);
    ApplicationLayerTestMessage(const ApplicationLayerTestMessage& other);
    virtual ~ApplicationLayerTestMessage();
    ApplicationLayerTestMessage& operator=(const ApplicationLayerTestMessage& other);
    virtual ApplicationLayerTestMessage *dup() const override {return new ApplicationLayerTestMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual int getSender() const;
    virtual void setSender(int sender);
    virtual bool getIsMalicious() const;
    virtual void setIsMalicious(bool isMalicious);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ApplicationLayerTestMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ApplicationLayerTestMessage& obj) {obj.parsimUnpack(b);}

} // namespace ib_dtm

#endif // ifndef __IB_DTM_APPLICATIONLAYERTESTMESSAGE_M_H

